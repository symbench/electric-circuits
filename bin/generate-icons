#!/usr/bin/env python

# Copyright 2020 Vanderbilt University. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================
import re
import argparse
import warnings
from pathlib import Path

import schemdraw
from schemdraw import elements as elm

ELEMENTS = {
    'Diode': elm.Diode,
    'NPN': elm.BjtNpn,
    'PNP': elm.BjtPnp,
    'Junction': elm.Dot,
    'Voltage': elm.SourceV,
    'Current': elm.SourceI,
    'Resistor': elm.Resistor,
    'Circuit': elm.Ic,
    'Ground': elm.Ground
}

PORT_COUNT = {
    'Diode': 2,
    'NPN': 3,
    'PNP': 3,
    'Junction': 4,
    'Voltage': 2,
    'Current': 2,
    'Resistor': 2,
    'Ground': 1
}

DST_DIR = Path('src/decorators/ElectricCircuitsDecorator/Icons/').resolve()


class IconsGenerator:
    """Generate SVG Icons for various electronic components

    This class uses the `schemdraw` python package to generate
    svg Icons for various electric circuit components

    Parameters
    ----------
    dst_dir: Path like, default='./src/decorators/ElectricCircuitsDecorator/Icons/'
        The destination directory to save the Icons in
    kwargs:
        keyword arguments for schemdraw.Drawing object
    """
    def __init__(self, dst_dir=None, **kwargs):
        units = kwargs.pop('units', 1.8)
        inches_per_unit = kwargs.pop('inches_per_unit', 0.5)

        self.drawing = schemdraw.Drawing(
            unit=units,
            inches_per_unit=inches_per_unit,
            **kwargs
        )
        if dst_dir is None:
            self.dst_dir = DST_DIR
        else:
            if isinstance(dst_dir, str):
                dst_dir = Path(dst_dir).resolve()
            self.dst_dir = dst_dir

    def draw(self):
        """Draw the icons"""
        for dst_name, el in ELEMENTS.items():
            kwargs = dict()
            d = 'right'

            if dst_name == 'Port':
                kwargs['open'] = True

            if el == elm.BjtNpn or el == elm.BjtPnp:
                kwargs['circle'] = True

            if el == elm.SourceI or el == elm.SourceV:
                d = 'up'

            self._draw_element(
                el,
                dst_name,
                d=d,
                label=None,
                **kwargs
            )

    def _draw_element(self,
                      element,
                      dst_name,
                      d='right',
                      label=None,
                      **kwargs):
        self.drawing.elements.clear()

        self.drawing.add(
            element,
            d=d,
            label=label,
            **kwargs
        )

        # Two passes necessary, no way to get transparent svg file
        self.drawing.save(f'{self.dst_dir}/{dst_name}.svg')

        svg_data = None
        with open(f'{self.dst_dir}/{dst_name}.svg', 'r') as svg_file:
            svg_data = svg_file.read()

        # Take only what's inside <svg>
        matches = re.search(r'<svg.*>.*</svg>', svg_data, re.DOTALL)
        if matches:
            svg_data = matches.group(0)
        else:
            warnings.warn('Cannot explicitly match <svg/> tag')

        # Insert a group tag for "ports"
        ports = ''

        if num_ports := PORT_COUNT.get(dst_name, None):
            ports = self._get_ports(num_ports)

        svg_data = svg_data.split('\n')

        for i, line in enumerate(svg_data):
            if line.endswith('</g>'):
                svg_data[i] = ports + line
                break

        svg_data = '\n'.join(svg_data)

        with (self.dst_dir / f'{dst_name}.svg').open('w') as dstIcon:
            dstIcon.write(svg_data)

    @staticmethod
    def _get_ports(num_ports):
        ports = '<g class="ports">\n'
        for j in range(1, num_ports+1):
            ports += f'<g class="port-{j}"></g>\n'
        return ports + '</g>'


def main():
    parser = argparse.ArgumentParser(description='Generate Icons for ElectricCircuitsDecorator')
    parser.add_argument(
        '--dst-dir',
        default=DST_DIR,
        metavar='DST_DIR',
        type=str,
        help='The destination directory to save the Icons in'
    )
    args = parser.parse_args()

    ig = IconsGenerator(dst_dir=args.dst_dir)
    ig.draw()


if __name__ == '__main__':
    main()
