#! /usr/bin/env python3
import argparse
import importlib
import inspect
import json
import os
from datetime import datetime
from pathlib import Path
from typing import Any, Union

import pandas as pd

SPLIT_PLACE_HOLDER = "~"
UNICODE_MAP = {
    "Ω": "Ohm",
    "∞": "Infinity",
    "◦C": "Celsius",
    "1/◦C": "1/Celsius",
    "1/◦C2": "1/Celsius^2",
    "A/V2": "A/V^2",
    "F/m2": "F/m^2",
    "cm−3": "cm^-3",
    "cm−2": "cm^-2",
    "cm2/V·sec": "cm^2/V*sec",
}

NGSPICE_URL = "http://ngspice.sourceforge.net/docs/ngspice-31-manual.pdf"
DIODE_MODEL_PAGES = ["118", "119"]
BJT_MODEL_PAGES = ["127", "128", "129", "130"]
MOS_MODEL_1_2_3_6_PAGES_LEVEL = ["143", "144", "145"]
POWER_MOS_PAGES = ["150", "151", "152"]

DIODE_MODEL_MISSING_LINES = [
    {
        "Name": "AF",
        "Parameter": "Flicker noise exponent",
        "Units": "-",
        "Default": 1,
        "Scale factor": "",
    },
    {
        "Name": "TT",
        "Parameter": "Transit-time",
        "Units": "sec",
        "Default": 0.0,
        "Scale factor": "",
    },
]

BJT_MODEL_MISSING_LINES = [
    {
        "Name": "ITF",
        "Parameter": "High-current parameter for effect on TF.",
        "Units": "A",
        "Default": 0,
        "Scale factor": "area",
    },
    {
        "Name": "TRB2",
        "Parameter": "2nd order temperature coefficient for RB",
        "Units": "1/◦C2",
        "Default": 0.0,
        "Scale factor": "",
    },
    {
        "Name": "TVAR1",
        "Parameter": "1st order temperature coefficient for VAR",
        "Units": "1/◦C",
        "Default": 0.0,
        "Scale factor": "",
    },
]

MOS_MODEL_MISSING_LINES_1_2_3_6 = [
    {
        "Name": "ETA",
        "Parameter": "Static feedback (MOS3 only)",
        "Units": "-",
        "Default": 0.0,
    },
    {
        "Name": "RSH",
        "Parameter": "Drain and source diffusion sheet resistance",
        "Units": "Ω/",
        "Default": 0.0,
    },
]

POWER_MOS_MISSING_LINES = [
    {
        "Name": "THETA",
        "Parameter": "Vgs influence on mobility",
        "Units": "1/V",
        "Default": 0.0,
    },
]

DEVICE_MODEL_TEMPLATE = Path(__file__).resolve().parent / "DeviceModelStarter.json"


def _load_json(json_path: Union[str, Path]):
    with open(json_path) as json_file:
        return json.load(json_file)


def _get_missing_attribute_meta(param: str, class_name: str) -> dict:
    if param == "dc_offset":
        return {
            "name": "dc_offset",
            "parameter": "dc offset",
            "default_value": 0,
            "units": "A" if "Current" in class_name else "V",
        }
    elif param == "ac_magnitude":
        return {
            "name": "ac_magnitude",
            "parameter": "ac magnitude",
            "default_value": 0,
            "units": "A" if "Current" in class_name else "V",
        }
    elif param == "values":
        return {
            "name": "values",
            "parameter": "Piecewise Linear Values",
            "default_value": "[(0, 0)]",
            "units": "A" if "Current" in class_name else "V",
        }
    elif param == "repeate_time":
        return {
            "name": "repeate_time",
            "parameter": "Repeat Time",
            "default_value": 0,
            "units": "sec",
        }
    elif param == "delay_time" or param == "time_delay":
        return {
            "name": param,
            "parameter": "Delay Time",
            "default_value": 0,
            "units": "sec",
        }
    elif param == "duration":
        return {
            "name": "duration",
            "parameter": "Duration for random values to show up",
            "default_value": 0,
            "units": "sec",
        }
    else:
        return {}


def _get_attribute_constraints(name: str) -> Union[dict, None]:
    if name == "random_type":
        return {"possible_values": ["uniform", "exponential", "gaussian", "poisson"]}


class PySpiceMissingException(Exception):
    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MissingTabulaException(Exception):
    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PySpiceParser:
    """A class to parse PySpice python library

    This class parses the PySpice python library
    for attributes of the various components to be used in SPICE simulations
    """

    def __init__(self) -> None:
        self._high_level_elements = []
        self._basic_elements = []
        self._confirm_pyspice_existence()
        self._meta_dict = {}

    def run(self) -> dict:
        import PySpice

        self._parse_basic_elements()
        print(f"Found {len(self._basic_elements)} basic elements")

        self._parse_highlevel_elements()
        print(f"Found {len(self._high_level_elements)} high level elements")

        return {
            "high_level_elements": self._high_level_elements,
            "basic_elements": self._basic_elements,
            "pyspice_version": str(PySpice.__version__),
        }

    def _parse_basic_elements(self) -> None:
        pass

    def _parse_highlevel_elements(self) -> None:
        from PySpice.Spice import HighLevelElement, _get_elements

        for element in _get_elements(HighLevelElement):
            if "Spice.HighLevelElement" in repr(element):
                self._high_level_elements.append(
                    self._parse_high_level_members(element)
                )

    def _parse_high_level_members(self, class_: type) -> dict:
        class_details = {
            "name": class_.__name__,
            "pins_count": 2,
            "attributes": [],
            "class_doc": class_.__doc__,
        }
        for super_class in inspect.getmro(class_):
            if "Mixin" in repr(super_class) and "MixinAbc" not in repr(super_class):
                mixin_signature = inspect.signature(super_class)
                class_details["mixin_doc"] = super_class.__doc__
                meta_dict = self._add_to_meta_dict(class_.__name__, super_class.__doc__)
                for param_name, param in mixin_signature.parameters.items():
                    if not (val := meta_dict.get(param_name)):
                        val = _get_missing_attribute_meta(param_name, class_.__name__)

                    class_details["attributes"].append(
                        {
                            "name": param_name,
                            "default": self._get_default_for(param_name, param),
                            "constraints": _get_attribute_constraints(param_name),
                            "attribute_meta": val if val is not None else {},
                        }
                    )

        return class_details

    def _add_to_meta_dict(self, class_name: str, class_doc: str) -> dict:
        meta_dict = {}
        if "TRRANDOM" in class_doc:
            return {}
        usable_lines = []
        for line in class_doc.split("\n"):
            if line.strip().startswith("+") or line.strip().startswith("|"):
                if line and "-" not in line:
                    usable_lines.append(
                        line.replace("Td1+Tstep", "sum(Td1, Tstep)")
                        .strip()
                        .replace("|", "")
                        .strip()
                        .replace("+", SPLIT_PLACE_HOLDER)
                    )

        if len(usable_lines):
            meta_keys = list(
                key.strip() for key in usable_lines[0].split(SPLIT_PLACE_HOLDER)
            )
            for params in usable_lines[1:]:
                params_gen = (val.strip() for val in params.split(SPLIT_PLACE_HOLDER))
                params_dict = {}
                param_name = ""
                for j, val in enumerate(params_gen):
                    meta_key = self._to_camel_case(meta_keys[j])
                    if meta_key == "parameter":
                        param_name = self._to_camel_case(val)

                    if (freq := "1/sec") in val:
                        val = val.replace(freq, "Hz")

                    if "sum" in val or "," not in val:
                        params_dict[meta_key] = val
                    elif "Current" in class_name:
                        params_dict[self._to_camel_case(meta_keys[j])] = "A"
                    elif "Voltage" in class_name:
                        params_dict[self._to_camel_case(meta_keys[j])] = "V"

                meta_dict[param_name] = params_dict

        return meta_dict

    @staticmethod
    def _to_camel_case(string: str) -> str:
        return "_".join(string.lower().split(" ")).replace(".", "")

    @staticmethod
    def _confirm_pyspice_existence() -> None:
        try:
            pyspice = importlib.import_module("PySpice")
        except ImportError as e:
            raise PySpiceMissingException(str(e))
        del pyspice

    @staticmethod
    def _get_default_for(param_name: str, parameter: inspect.Parameter) -> Any:
        if param_name == "values":
            return "[(0, 0)]"
        if param_name == "random_type":
            return "uniform"
        if param_name == "damping_factor":
            return 0.01
        if param_name in (
            "phase",
            "fall_delay_time",
            "fall_time_constant",
            "rise_time_constant",
        ):
            return 0
        return (
            parameter.default
            if not parameter.default == inspect.Parameter.empty
            else 0.0
        )


class NGSpiceManualParser:
    """A class to parse NGSpice user manual

    This class parses the NGSpice user manual
    for attributes of the various device model parameters
    """

    def __init__(self) -> None:
        self._confirm_tabula()
        self.ngspice_url = NGSPICE_URL
        self.device_models = _load_json(DEVICE_MODEL_TEMPLATE)

    def run(self) -> dict:
        self._parse_diode_model()
        self._parse_bjt_model()
        self._parse_mos_model()
        self._add_source_info()
        return self.device_models

    def _parse_diode_model(self) -> None:
        import tabula

        dfs = tabula.read_pdf(self.ngspice_url, pages=DIODE_MODEL_PAGES, lattice=True)
        for idx, data_frame in enumerate(dfs):
            data_frame.drop(columns=["Example"], errors="ignore", inplace=True)

        merged = pd.concat(dfs, ignore_index=True)
        merged = merged.append(DIODE_MODEL_MISSING_LINES)

        diode_model = {
            "name": "NGSpiceDiodeModel",
            "attributes": [],
            "parent": "DiodeModel",
            "source": f"{self.ngspice_url}, pages[{','.join(DIODE_MODEL_PAGES)}]",
        }
        for idx, row in merged.iterrows():
            self._df_row_to_meta_dict(diode_model, row)

        self.device_models["children"].append(diode_model)

    def _parse_bjt_model(self):
        import tabula

        dfs = tabula.read_pdf(
            self.ngspice_url,
            pages=BJT_MODEL_PAGES,
            pandas_options={"header": None},
            lattice=True,
        )

        merged = pd.concat(dfs, ignore_index=True)
        merged.columns = merged.iloc[0]
        merged = merged[1:]
        merged.drop(columns=["Example"], errors="ignore", inplace=True)

        merged.rename(columns={"Parameters": "Parameter"}, inplace=True)
        merged = merged.append(BJT_MODEL_MISSING_LINES, ignore_index=True)

        bjt_model = {
            "name": "NGSpiceBJTModel",
            "attributes": [],
            "parent": "BJTModel",
            "source": f"{self.ngspice_url}, pages[{','.join(BJT_MODEL_PAGES)}]",
        }
        for idx, row in merged.iterrows():
            self._df_row_to_meta_dict(bjt_model, row)

        self.device_models["children"].append(bjt_model)

    def _parse_mos_model(self) -> None:
        # Level 1, 2, 3, 6
        self._parse_mos_level_1_2_3_6()
        # power MOSModel
        self._parse_power_mos_model()

    def _parse_mos_level_1_2_3_6(self) -> None:
        import tabula

        dfs = tabula.read_pdf(
            self.ngspice_url, pages=MOS_MODEL_1_2_3_6_PAGES_LEVEL, lattice=True
        )

        for idx, data_frame in enumerate(dfs):
            data_frame.drop(columns=["Example"], errors="ignore", inplace=True)

        merged = pd.concat(dfs, ignore_index=True)
        merged = merged.append(MOS_MODEL_MISSING_LINES_1_2_3_6)

        for idx, row in merged.iterrows():
            if row["Name"] == "GAMMA":
                row["Units"] = "V^0.5"
            if row["Name"] == "MJSW":
                row["Default"] = 0.50
            if row["Name"] == "JS":
                row["Default"] = 0.0
                row["Units"] = "A"

        mos_model = {
            "name": "NGSPICEMOSModelLVL1236",
            "attributes": [],
            "parent": "MOSModel",
            "levels": [1, 2, 3, 6],
            "source": f"{self.ngspice_url}, pages[{','.join(MOS_MODEL_1_2_3_6_PAGES_LEVEL)}]",
        }

        for idx, row in merged.iterrows():
            self._df_row_to_meta_dict(mos_model, row)

        self.device_models["children"].append(mos_model)

    def _parse_power_mos_model(self):
        import tabula

        dfs = tabula.read_pdf(self.ngspice_url, pages=POWER_MOS_PAGES, lattice=True)

        for idx, data_frame in enumerate(dfs):
            data_frame.drop(columns=["Example"], errors="ignore", inplace=True)

        merged = pd.concat(dfs, ignore_index=True)
        merged.dropna(axis=0, how="all", inplace=True)
        merged = merged.append(POWER_MOS_MISSING_LINES)

        mos_model = {
            "name": "VDMOS",
            "attributes": [],
            "parent": "MOSModel",
            "levels": [1, 2, 3, 6],
            "source": f"{self.ngspice_url}, pages[{','.join(POWER_MOS_PAGES)}]",
        }

        for idx, row in merged.iterrows():
            self._df_row_to_meta_dict(mos_model, row)

        self.device_models["children"].append(mos_model)

    def _add_source_info(self) -> None:
        """Add source information for DeviceModel dictionary"""
        self.device_models["info"] = {
            "source": "NGSpice 31 user manual",
            "url": self.ngspice_url,
            "lastModified": f"{datetime.now()}",
        }

    @staticmethod
    def _df_row_to_meta_dict(meta_dict: dict, df_row: pd.Series) -> None:
        if not meta_dict.get("attributes"):
            meta_dict["attributes"] = []

        names = df_row["Name"].split("(")
        name = names[0].strip()
        alt_name = None
        if len(names) == 2:
            alt_name = names[1].replace(")", "").strip()
        try:
            df_row["Default"] = float(df_row["Default"])
        except ValueError:
            pass

        meta_dict["attributes"].append(
            {
                "name": name,
                "default": UNICODE_MAP.get(df_row["Default"], df_row["Default"]),
                "meta": {
                    "description": df_row["Parameter"].replace("\r", " "),
                    "units": None
                    if str(unit := UNICODE_MAP.get(df_row["Units"], df_row["Units"]))
                    in ("nan", "-")
                    else unit,
                    "alternateName": alt_name,
                    "scaleFactor": None
                    if (sf := str(df_row.get("Scale factor", "nan"))) == "nan"
                    else sf,
                },
            }
        )

    @staticmethod
    def _confirm_tabula() -> None:
        try:
            tabula = importlib.import_module("tabula")
        except ImportError as e:
            raise MissingTabulaException(str(e))
        del tabula


class SpiceSaver:
    """A components saver for PySpice and NGSpice.

    This class uses PySpiceParser and NGSpiceManualParser to generate
    schema for PySpice Elements/ NGSpice Device Models

    Parameters
    ----------
    out_dir : str or Path like, default=None
        The output directory to save the generated schemas in
    """

    def __init__(
        self,
        out_dir: Union[str, Path] = None,
        pyspice_prefix: str = "PySpice",
        ngspice_prefix: str = "NGSpice",
    ) -> None:
        if out_dir is None:
            out_dir = "."
        self.out_dir = Path(out_dir).resolve()
        self.pyspice_prefix = pyspice_prefix
        self.ngspice_prefix = ngspice_prefix

        print(f"Schemas will be saved in {self.out_dir}")

        if not self.out_dir.exists():
            os.makedirs(self.out_dir)

        self.pyspice_parser = PySpiceParser()
        self.ngspice_parser = NGSpiceManualParser()

    def parse_and_save_pyspice(self) -> None:
        print("Parsing PySpice")
        pyspice_elements = self.pyspice_parser.run()
        self.save_json(
            out_file := (self.out_dir / self.pyspice_prefix / "elements.json"),
            pyspice_elements,
        )
        print(f"PySpice schema saved in {out_file}")

    def parse_and_save_ngspice(self):
        print("Parsing NGSpice")
        ngspice_models = self.ngspice_parser.run()
        self.save_json(
            out_file := (self.out_dir / self.ngspice_prefix / "deviceModels.json"),
            ngspice_models,
        )
        print(f"PySpice schema saved in {out_file}")

    @staticmethod
    def save_json(path: Path, content: dict) -> None:
        with open(path, "w") as json_file:
            json.dump(content, json_file, indent=2)


def main() -> None:
    out_dir = "./src/plugins/CreateElectricCircuitsMeta"
    pyspice_prefix = "PySpice"
    ngspice_prefix = "NGSpice"
    parser = argparse.ArgumentParser(
        description="Spice DeviceModel and Elements Schema Saver",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    choices = {"pyspice", "ngspice", "all"}
    parser.add_argument(
        "option", choices=choices, type=str, metavar="OPTION", help=f"One of {choices}"
    )
    parser.add_argument(
        "--out-dir",
        help="The output directory to save the generated json",
        type=str,
        default=out_dir,
    )

    parser.add_argument(
        "--pyspice-prefix",
        help="The subpath/prefix directory to save the generated json for PySpice",
        type=str,
        default=pyspice_prefix,
    )

    parser.add_argument(
        "--ngspice-prefix",
        help="The subpath/prefix directory to save the generated json for NGSpice",
        type=str,
        default=ngspice_prefix,
    )
    args = parser.parse_args()
    schema_saver = SpiceSaver(
        args.out_dir,
        pyspice_prefix=args.pyspice_prefix,
        ngspice_prefix=args.ngspice_prefix,
    )

    if args.option == "pyspice":
        schema_saver.parse_and_save_pyspice()
    if args.option == "ngspice":
        schema_saver.parse_and_save_ngspice()
    if args.option == "all":
        schema_saver.parse_and_save_pyspice()
        schema_saver.parse_and_save_ngspice()


if __name__ == "__main__":
    main()
